var _excluded = ["appear", "children", "disabled", "ignoreDirection", "onScroll", "target", "threshold", "transition"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement } from 'react';
import PropTypes from 'prop-types';
import useScrollTrigger from '@mui/material/useScrollTrigger';
import Slide from '@mui/material/Slide';
import Grow from '@mui/material/Grow';
import Zoom from '@mui/material/Zoom';
import Collapse from '@mui/material/Collapse';
import Fade from '@mui/material/Fade';
export default function ScrollTrigger(props) {
  var appear = props.appear,
      children = props.children,
      disabled = props.disabled,
      disableHysteresis = props.ignoreDirection,
      onScroll = props.onScroll,
      target = props.target,
      threshold = props.threshold,
      transition = props.transition,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  var trigger = useScrollTrigger({
    threshold: threshold,
    disableHysteresis: disableHysteresis,
    target: target
  });
  var triggerStatus = onScroll === 'show' ? trigger : !trigger;

  function element() {
    if (transition === 'slide') return Slide;
    if (transition === 'grow') return Grow;
    if (transition === 'zoom') return Zoom;
    if (transition === 'collapse') return Collapse;
    if (transition === 'fade') return Fade;
  }

  return createElement(element(), _extends({
    appear: appear,
    "in": disabled || triggerStatus
  }, rest), children);
}
ScrollTrigger.propTypes = {
  appear: PropTypes.bool,
  children: PropTypes.element.isRequired,
  disabled: PropTypes.bool,
  ignoreDirection: PropTypes.bool,
  onScroll: PropTypes.oneOf(['show', 'hide']),
  target: PropTypes.oneOfType([PropTypes.object, PropTypes.node]),
  threshold: PropTypes.number,
  transition: PropTypes.oneOf(['slide', 'grow', 'zoom', 'collapse', 'fade'])
};
ScrollTrigger.defaultProps = {
  appear: false,
  disabled: false,
  ignoreDirection: false,
  onScroll: 'hide',
  target: window,
  threshold: 100,
  transition: 'grow'
};